apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
  labels:
    app: my-app
spec:
  replicas: 4  # Первоначально запускаем 4 пода для пиковой нагрузки
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app-container
        image: my-app-image:latest
        resources:
          requests:
            cpu: "0.1"  # Регулярное потребление CPU после инициализации
            memory: "128Mi"  # Постоянное потребление памяти
          limits:
            cpu: "0.5"  # Ограничение на CPU для обработки первых запросов
            memory: "256Mi"  # Небольшой запас памяти для пиковых моментов
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15  # Учитываем время на инициализацию
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - my-app
              topologyKey: "kubernetes.io/hostname"  # Обеспечение отказоустойчивости через распределение подов по разным хостам

---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: my-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-app
  minReplicas: 2  # Минимальное количество подов ночью
  maxReplicas: 10  # Максимальное количество подов в пиковое время
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50  # Целевая загрузка CPU для автоскейлинга
